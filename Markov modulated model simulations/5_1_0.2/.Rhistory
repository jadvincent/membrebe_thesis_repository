d = (x - 0)^2 + (y-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
print(opt.cut(perf, pred))
######################
dev.off()
setwd("/Users/u0118390/Dropbox/PhD/mmm_codon/mmm_simulations_august2021/beast/for_chapter/1.5_1_0.2/")
q
setwd("/Users/u0118390/Dropbox/PhD/mmm_codon/mmm_simulations_august2021/beast/for_chapter/1.5_1_0.2/")
pdf(file = "roc3_1.5.pdf",   # The directory you want to save the file in
width = 14, # The width of the plot in inches
height = 4) # The height of the plot in inches
par(mfrow=c(1,3))
layout(matrix(c(1,3)))
rm(list=ls())
####
dir_names <- c("202109301", "202109302", "202109303", "202109304", "202109305", "202109306", "202109307", "202109308", "202109309", "2021093010")
pysim = NULL; cam2_all = NULL
### getting the site assignments
for (m in dir_names){
#  m = dir_names[1]
pysim0 = rep(c(1,0), times=c(5,91)) ### assignment of sites
pysim = rep(pysim0, times=10)
cam_trial = read.table(
paste("50_45_5/",m,"/beast_res2/camelid_pyvolve_sitehet_2mmm_2types.log", sep="")
, header=T, skip=2)
cam_trial = cam_trial[,-c(1:8)] #removes unnecessary variables
cam2 = cam_trial[,c(97:192)] #gets the values for omega=2
length = dim(cam_trial)[1]
cam2_v = colMeans(cam2[c(floor(length*0.10):length),])
cam2_all = append(cam2_all, cam2_v)
}
library(ROCR)
pred <- prediction(cam2_all,pysim, label.ordering = NULL)
perf <- performance(pred, "tpr", "fpr")
par(cex.axis=1.5)
plot(perf, col = 4, lwd=3, lty=1, cex.lab=1.5)
abline(coef = c(0,1))
##################### calculating sensitivty specificity
opt.cut = function(perf, pred){
cut.ind = mapply(FUN=function(x, y, p){
d = (x - 0)^2 + (y-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
print(opt.cut(perf, pred))
######################
rm(list=ls())
dir_names <- c("202109301", "202109302", "202109303", "202109304", "202109305", "202109306", "202109307", "202109308", "202109309", "2021093010")
pysim = NULL; cam2_all = NULL
### getting the site assignments
for (m in dir_names){
#  m = dir_names[1]
pysim0 = rep(c(1,0), times=c(5,91)) ### assignment of sites
pysim = rep(pysim0, times=10)
cam_trial = read.table(
paste("50_45_5/",m,"/beast_res4/camelid_pyvolve_sitehet_3mmm_2types.log", sep="")
, header=T, skip=2)
cam_trial = cam_trial[,-c(1:9)] #removes unnecessary variables
cam2 = cam_trial[,c(193:288)] #gets the values for omega=3
length = dim(cam_trial)[1]
cam2_v = colMeans(cam2[c(floor(length*0.10):length),])
cam2_all = append(cam2_all, cam2_v)
}
pred <- prediction(cam2_all,pysim, label.ordering = NULL)
perf <- performance(pred, "tpr", "fpr")
plot(perf, col = 2, lwd=3, lty=2, add=TRUE)
legend(0.6,0.4, legend = c("2-MM", "3-MM"), col = c(4,2), lty=c(1,2), lwd=c(2,2), bty="n", cex = 1.5)
##################### calculating sensitivty specificity
opt.cut = function(perf, pred){
cut.ind = mapply(FUN=function(x, y, p){
d = (x - 0)^2 + (y-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
print(opt.cut(perf, pred))
######################
rm(list=ls())
dir_names <- c("202109301", "202109302", "202109303", "202109304", "202109305", "202109306", "202109307", "202109308", "202109309", "2021093010")
pysim = NULL; cam2_all = NULL
### getting the site assignments
for (m in dir_names){
#  m = dir_names[1]
pysim0 = rep(c(1,0), times=c(10,86)) ### assignment of sites
pysim = rep(pysim0, times=10)
cam_trial = read.table(
paste("45_45_10/",m,"/beast_res2/camelid_pyvolve_sitehet_2mmm_2types.log", sep="")
, header=T, skip=2)
cam_trial = cam_trial[,-c(1:8)] #removes unnecessary variables
cam2 = cam_trial[,c(97:192)] #gets the values for omega=2
length = dim(cam_trial)[1]
cam2_v = colMeans(cam2[c(floor(length*0.10):length),])
cam2_all = append(cam2_all, cam2_v)
}
library(ROCR)
pred <- prediction(cam2_all,pysim, label.ordering = NULL)
perf <- performance(pred, "tpr", "fpr")
par(cex.axis=1.5)
plot(perf, col = 4, lwd=3, lty=1, cex.lab=1.5)
abline(coef = c(0,1))
##################### calculating sensitivty specificity
opt.cut = function(perf, pred){
cut.ind = mapply(FUN=function(x, y, p){
d = (x - 0)^2 + (y-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
print(opt.cut(perf, pred))
######################
rm(list=ls())
dir_names <- c("202109301", "202109302", "202109303", "202109304", "202109305", "202109306", "202109307", "202109308", "202109309", "2021093010")
pysim = NULL; cam2_all = NULL
### getting the site assignments
for (m in dir_names){
#  m = dir_names[1]
pysim0 = rep(c(1,0), times=c(10,86)) ### assignment of sites
pysim = rep(pysim0, times=10)
cam_trial = read.table(
paste("45_45_10/",m,"/beast_res4/camelid_pyvolve_sitehet_3mmm_2types.log", sep="")
, header=T, skip=2)
cam_trial = cam_trial[,-c(1:9)] #removes unnecessary variables
cam2 = cam_trial[,c(193:288)] #gets the values for omega=3
length = dim(cam_trial)[1]
cam2_v = colMeans(cam2[c(floor(length*0.10):length),])
cam2_all = append(cam2_all, cam2_v)
}
pred <- prediction(cam2_all,pysim, label.ordering = NULL)
perf <- performance(pred, "tpr", "fpr")
plot(perf, col = 2, lwd=3, lty=2, add=TRUE)
legend(0.6,0.4, legend = c("2-MM", "3-MM"), col = c(4,2), lty=c(1,2), lwd=c(2,2), bty="n", cex = 1.5)
##################### calculating sensitivty specificity
opt.cut = function(perf, pred){
cut.ind = mapply(FUN=function(x, y, p){
d = (x - 0)^2 + (y-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
print(opt.cut(perf, pred))
######################
rm(list=ls())
dir_names <- c("202109301", "202109302", "202109303", "202109304", "202109305", "202109306", "202109307", "202109308", "202109309", "2021093010")
pysim = NULL; cam2_all = NULL
### getting the site assignments
for (m in dir_names){
#  m = dir_names[1]
pysim0 = rep(c(1,0), times=c(19,77)) ### assignment of sites
pysim = rep(pysim0, times=10)
cam_trial = read.table(
paste("40_40_20/",m,"/beast_res2/camelid_pyvolve_sitehet_2mmm_2types.log", sep="")
, header=T, skip=2)
cam_trial = cam_trial[,-c(1:8)] #removes unnecessary variables
cam2 = cam_trial[,c(97:192)] #gets the values for omega=2
length = dim(cam_trial)[1]
cam2_v = colMeans(cam2[c(floor(length*0.10):length),])
cam2_all = append(cam2_all, cam2_v)
}
library(ROCR)
pred <- prediction(cam2_all,pysim, label.ordering = NULL)
perf <- performance(pred, "tpr", "fpr")
par(cex.axis=1.5)
plot(perf, col = 4, lwd=3, lty=1, cex.lab=1.5)
abline(coef = c(0,1))
##################### calculating sensitivty specificity
opt.cut = function(perf, pred){
cut.ind = mapply(FUN=function(x, y, p){
d = (x - 0)^2 + (y-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
print(opt.cut(perf, pred))
######################
rm(list=ls())
dir_names <- c("202109301", "202109302", "202109303", "202109304", "202109305", "202109306", "202109307", "202109308", "202109309", "2021093010")
pysim = NULL; cam2_all = NULL
### getting the site assignments
for (m in dir_names){
#  m = dir_names[1]
pysim0 = rep(c(1,0), times=c(19,77)) ### assignment of sites
pysim = rep(pysim0, times=10)
cam_trial = read.table(
paste("80_20_percent/",m,"/beast_res4/camelid_pyvolve_sitehet_3mmm_2types.log", sep="")
, header=T, skip=2)
cam_trial = cam_trial[,-c(1:9)] #removes unnecessary variables
cam2 = cam_trial[,c(193:288)] #gets the values for omega=3
length = dim(cam_trial)[1]
cam2_v = colMeans(cam2[c(floor(length*0.10):length),])
cam2_all = append(cam2_all, cam2_v)
}
pred <- prediction(cam2_all,pysim, label.ordering = NULL)
perf <- performance(pred, "tpr", "fpr")
plot(perf, col = 2, lwd=3, lty=2, add=TRUE)
legend(0.6,0.4, legend = c("2-MM", "3-MM"), col = c(4,2), lty=c(1,2), lwd=c(2,2), bty="n", cex = 1.5)
##################### calculating sensitivty specificity
opt.cut = function(perf, pred){
cut.ind = mapply(FUN=function(x, y, p){
d = (x - 0)^2 + (y-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
print(opt.cut(perf, pred))
######################
dev.off()
setwd("/Users/u0118390/Dropbox/PhD/mmm_codon/mmm_simulations_august2021/beast/for_chapter/5_1_0.2/")
rm(list=ls())
####
dir_names <- c("202109301", "202109302", "202109303", "202109304", "202109305", "202109306", "202109307", "202109308", "202109309", "2021093010")
pysim = NULL; cam2_all = NULL
### getting the site assignments
for (m in dir_names){
#  m = dir_names[1]
pysim0 = rep(c(1,0), times=c(5,91)) ### assignment of sites
pysim = rep(pysim0, times=10)
cam_trial = read.table(
paste("50_45_5/",m,"/beast_res2/camelid_pyvolve_sitehet_2mmm_2types.log", sep="")
, header=T, skip=2)
cam_trial = cam_trial[,-c(1:8)] #removes unnecessary variables
cam2 = cam_trial[,c(97:192)] #gets the values for omega=2
length = dim(cam_trial)[1]
cam2_v = colMeans(cam2[c(floor(length*0.10):length),])
cam2_all = append(cam2_all, cam2_v)
}
library(ROCR)
pred <- prediction(cam2_all,pysim, label.ordering = NULL)
perf <- performance(pred, "tpr", "fpr")
par(cex.axis=1.5)
plot(perf, col = 4, lwd=3, lty=1, cex.lab=1.5)
abline(coef = c(0,1))
##################### calculating sensitivty specificity
opt.cut = function(perf, pred){
cut.ind = mapply(FUN=function(x, y, p){
d = (x - 0)^2 + (y-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
print(opt.cut(perf, pred))
rm(list=ls())
dir_names <- c("202109301", "202109302", "202109303", "202109304", "202109305", "202109306", "202109307", "202109308", "202109309", "2021093010")
pysim = NULL; cam2_all = NULL
### getting the site assignments
for (m in dir_names){
#  m = dir_names[1]
pysim0 = rep(c(1,0), times=c(5,91)) ### assignment of sites
pysim = rep(pysim0, times=10)
cam_trial = read.table(
paste("50_45_5/",m,"/beast_res4/camelid_pyvolve_sitehet_3mmm_2types.log", sep="")
, header=T, skip=2)
cam_trial = cam_trial[,-c(1:9)] #removes unnecessary variables
cam2 = cam_trial[,c(193:288)] #gets the values for omega=3
length = dim(cam_trial)[1]
cam2_v = colMeans(cam2[c(floor(length*0.10):length),])
cam2_all = append(cam2_all, cam2_v)
}
pred <- prediction(cam2_all,pysim, label.ordering = NULL)
perf <- performance(pred, "tpr", "fpr")
plot(perf, col = 2, lwd=3, lty=2, add=TRUE)
legend(0.6,0.4, legend = c("2-MM", "3-MM"), col = c(4,2), lty=c(1,2), lwd=c(2,2), bty="n", cex = 1.5)
##################### calculating sensitivty specificity
opt.cut = function(perf, pred){
cut.ind = mapply(FUN=function(x, y, p){
d = (x - 0)^2 + (y-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
print(opt.cut(perf, pred))
rm(list=ls())
dir_names <- c("202109301", "202109302", "202109303", "202109304", "202109305", "202109306", "202109307", "202109308", "202109309", "2021093010")
pysim = NULL; cam2_all = NULL
### getting the site assignments
for (m in dir_names){
#  m = dir_names[1]
pysim0 = rep(c(1,0), times=c(10,86)) ### assignment of sites
pysim = rep(pysim0, times=10)
cam_trial = read.table(
paste("45_45_10/",m,"/beast_res2/camelid_pyvolve_sitehet_2mmm_2types.log", sep="")
, header=T, skip=2)
cam_trial = cam_trial[,-c(1:8)] #removes unnecessary variables
cam2 = cam_trial[,c(97:192)] #gets the values for omega=2
length = dim(cam_trial)[1]
cam2_v = colMeans(cam2[c(floor(length*0.10):length),])
cam2_all = append(cam2_all, cam2_v)
}
library(ROCR)
pred <- prediction(cam2_all,pysim, label.ordering = NULL)
perf <- performance(pred, "tpr", "fpr")
par(cex.axis=1.5)
plot(perf, col = 4, lwd=3, lty=1, cex.lab=1.5)
abline(coef = c(0,1))
##################### calculating sensitivty specificity
opt.cut = function(perf, pred){
cut.ind = mapply(FUN=function(x, y, p){
d = (x - 0)^2 + (y-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
print(opt.cut(perf, pred))
rm(list=ls())
dir_names <- c("202109301", "202109302", "202109303", "202109304", "202109305", "202109306", "202109307", "202109308", "202109309", "2021093010")
pysim = NULL; cam2_all = NULL
### getting the site assignments
for (m in dir_names){
#  m = dir_names[1]
pysim0 = rep(c(1,0), times=c(10,86)) ### assignment of sites
pysim = rep(pysim0, times=10)
cam_trial = read.table(
paste("45_45_10/",m,"/beast_res4/camelid_pyvolve_sitehet_3mmm_2types.log", sep="")
, header=T, skip=2)
cam_trial = cam_trial[,-c(1:9)] #removes unnecessary variables
cam2 = cam_trial[,c(193:288)] #gets the values for omega=3
length = dim(cam_trial)[1]
cam2_v = colMeans(cam2[c(floor(length*0.10):length),])
cam2_all = append(cam2_all, cam2_v)
}
pred <- prediction(cam2_all,pysim, label.ordering = NULL)
perf <- performance(pred, "tpr", "fpr")
plot(perf, col = 2, lwd=3, lty=2, add=TRUE)
legend(0.6,0.4, legend = c("2-MM", "3-MM"), col = c(4,2), lty=c(1,2), lwd=c(2,2), bty="n", cex = 1.5)
##################### calculating sensitivty specificity
opt.cut = function(perf, pred){
cut.ind = mapply(FUN=function(x, y, p){
d = (x - 0)^2 + (y-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
print(opt.cut(perf, pred))
rm(list=ls())
dir_names <- c("202109301", "202109302", "202109303", "202109304", "202109305", "202109306", "202109307", "202109308", "202109309", "2021093010")
pysim = NULL; cam2_all = NULL
### getting the site assignments
for (m in dir_names){
#  m = dir_names[1]
pysim0 = rep(c(1,0), times=c(19,77)) ### assignment of sites
pysim = rep(pysim0, times=10)
cam_trial = read.table(
paste("40_40_20/",m,"/beast_res2/camelid_pyvolve_sitehet_2mmm_2types.log", sep="")
, header=T, skip=2)
cam_trial = cam_trial[,-c(1:8)] #removes unnecessary variables
cam2 = cam_trial[,c(97:192)] #gets the values for omega=2
length = dim(cam_trial)[1]
cam2_v = colMeans(cam2[c(floor(length*0.10):length),])
cam2_all = append(cam2_all, cam2_v)
}
library(ROCR)
pred <- prediction(cam2_all,pysim, label.ordering = NULL)
perf <- performance(pred, "tpr", "fpr")
par(cex.axis=1.5)
plot(perf, col = 4, lwd=3, lty=1, cex.lab=1.5)
abline(coef = c(0,1))
rm(list=ls())
dir_names <- c("202109301", "202109302", "202109303", "202109304", "202109305", "202109306", "202109307", "202109308", "202109309", "2021093010")
pysim = NULL; cam2_all = NULL
### getting the site assignments
for (m in dir_names){
#  m = dir_names[1]
pysim0 = rep(c(1,0), times=c(19,77)) ### assignment of sites
pysim = rep(pysim0, times=10)
cam_trial = read.table(
paste("40_40_20/",m,"/beast_res2/camelid_pyvolve_sitehet_2mmm_2types.log", sep="")
, header=T, skip=2)
cam_trial = cam_trial[,-c(1:8)] #removes unnecessary variables
cam2 = cam_trial[,c(97:192)] #gets the values for omega=2
length = dim(cam_trial)[1]
cam2_v = colMeans(cam2[c(floor(length*0.10):length),])
cam2_all = append(cam2_all, cam2_v)
}
cam_trial = read.table(
paste("40_40_20/",m,"/beast_res2/camelid_pyvolve_sitehet_2mmm_2types.log", sep="")
, header=T, skip=2)
cam_trial
cam_trial = cam_trial[,-c(1:8)] #removes unnecessary variables
cam2 = cam_trial[,c(97:192)] #gets the values for omega=2
cam_trial[,c(97:192)]
str(cam_trial)
dim(cam_trial)
rm(list=ls())
dir_names <- c("202109301", "202109302", "202109303", "202109304", "202109305", "202109306", "202109307", "202109308", "202109309", "2021093010")
pysim = NULL; cam2_all = NULL
### getting the site assignments
for (m in dir_names){
#  m = dir_names[1]
pysim0 = rep(c(1,0), times=c(10,86)) ### assignment of sites
pysim = rep(pysim0, times=10)
cam_trial = read.table(
paste("45_45_10/",m,"/beast_res4/camelid_pyvolve_sitehet_3mmm_2types.log", sep="")
, header=T, skip=2)
cam_trial = cam_trial[,-c(1:9)] #removes unnecessary variables
cam2 = cam_trial[,c(193:288)] #gets the values for omega=3
length = dim(cam_trial)[1]
cam2_v = colMeans(cam2[c(floor(length*0.10):length),])
cam2_all = append(cam2_all, cam2_v)
}
pred <- prediction(cam2_all,pysim, label.ordering = NULL)
perf <- performance(pred, "tpr", "fpr")
plot(perf, col = 2, lwd=3, lty=2, add=TRUE)
legend(0.6,0.4, legend = c("2-MM", "3-MM"), col = c(4,2), lty=c(1,2), lwd=c(2,2), bty="n", cex = 1.5)
##################### calculating sensitivty specificity
opt.cut = function(perf, pred){
cut.ind = mapply(FUN=function(x, y, p){
d = (x - 0)^2 + (y-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
print(opt.cut(perf, pred))
rm(list=ls())
dir_names <- c("202109301", "202109302", "202109303", "202109304", "202109305", "202109306", "202109307", "202109308", "202109309", "2021093010")
pysim = NULL; cam2_all = NULL
### getting the site assignments
for (m in dir_names){
#  m = dir_names[1]
pysim0 = rep(c(1,0), times=c(10,86)) ### assignment of sites
pysim = rep(pysim0, times=10)
cam_trial = read.table(
paste("45_45_10/",m,"/beast_res2/camelid_pyvolve_sitehet_2mmm_2types.log", sep="")
, header=T, skip=2)
cam_trial = cam_trial[,-c(1:8)] #removes unnecessary variables
cam2 = cam_trial[,c(97:192)] #gets the values for omega=2
length = dim(cam_trial)[1]
cam2_v = colMeans(cam2[c(floor(length*0.10):length),])
cam2_all = append(cam2_all, cam2_v)
}
str(cam_trial)
dim(cam_trial)
### getting the site assignments
for (m in dir_names){
#  m = dir_names[1]
pysim0 = rep(c(1,0), times=c(10,86)) ### assignment of sites
pysim = rep(pysim0, times=10)
cam_trial = read.table(
paste("45_45_10/",m,"/beast_res2/camelid_pyvolve_sitehet_2mmm_2types.log", sep="")
, header=T, skip=2)
cam_trial = cam_trial[,-c(1:8)] #removes unnecessary variables
cam2 = cam_trial[,c(97:192)] #gets the values for omega=2
length = dim(cam_trial)[1]
cam2_v = colMeans(cam2[c(floor(length*0.10):length),])
cam2_all = append(cam2_all, cam2_v)
}
library(ROCR)
pred <- prediction(cam2_all,pysim, label.ordering = NULL)
perf <- performance(pred, "tpr", "fpr")
par(cex.axis=1.5)
rm(list=ls())
dir_names <- c("202109301", "202109302", "202109303", "202109304", "202109305", "202109306", "202109307", "202109308", "202109309", "2021093010")
pysim = NULL; cam2_all = NULL
### getting the site assignments
for (m in dir_names){
#  m = dir_names[1]
pysim0 = rep(c(1,0), times=c(10,86)) ### assignment of sites
pysim = rep(pysim0, times=10)
cam_trial = read.table(
paste("45_45_10/",m,"/beast_res4/camelid_pyvolve_sitehet_3mmm_2types.log", sep="")
, header=T, skip=2)
cam_trial = cam_trial[,-c(1:9)] #removes unnecessary variables
cam2 = cam_trial[,c(193:288)] #gets the values for omega=3
length = dim(cam_trial)[1]
cam2_v = colMeans(cam2[c(floor(length*0.10):length),])
cam2_all = append(cam2_all, cam2_v)
}
pred <- prediction(cam2_all,pysim, label.ordering = NULL)
perf <- performance(pred, "tpr", "fpr")
plot(perf, col = 2, lwd=3, lty=2, add=TRUE)
legend(0.6,0.4, legend = c("2-MM", "3-MM"), col = c(4,2), lty=c(1,2), lwd=c(2,2), bty="n", cex = 1.5)
##################### calculating sensitivty specificity
opt.cut = function(perf, pred){
cut.ind = mapply(FUN=function(x, y, p){
d = (x - 0)^2 + (y-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
print(opt.cut(perf, pred))
rm(list=ls())
dir_names <- c("202109301", "202109302", "202109303", "202109304", "202109305", "202109306", "202109307", "202109308", "202109309", "2021093010")
pysim = NULL; cam2_all = NULL
### getting the site assignments
for (m in dir_names){
#  m = dir_names[1]
pysim0 = rep(c(1,0), times=c(19,77)) ### assignment of sites
pysim = rep(pysim0, times=10)
cam_trial = read.table(
paste("40_40_20/",m,"/beast_res2/camelid_pyvolve_sitehet_2mmm_2types.log", sep="")
, header=T, skip=2)
cam_trial = cam_trial[,-c(1:8)] #removes unnecessary variables
cam2 = cam_trial[,c(97:192)] #gets the values for omega=2
length = dim(cam_trial)[1]
cam2_v = colMeans(cam2[c(floor(length*0.10):length),])
cam2_all = append(cam2_all, cam2_v)
}
